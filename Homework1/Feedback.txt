# HW grading scale: check(+) --> excellent (good code and analysis) 
#                   check    --> satisfactory (minor shortcomings in code and/or analysis)
#                   check(-) --> significant problems w/code or analysis


1) Problem 1 (area.cpp embellishments): 

* Your code looks good, though 1 minor nitpick is that you didn't write an area function (item 4). 


2)Problem 2 (sum up/down): 

* I like how you used this exercise  as an opportunity to play around with external 
functions with header files and to try a novel framework to store the running sums in a vector.

Regarding the latter point though, it's a good idea in a first pass at an algorithm
to do it in a straightforward (i.e., brute force) way where you can be confident that it's 
implementing the correct equations. Once you are confident the results are correct, THEN you 
can turn to  questions of optimization and a more elegant design. I bring this up because your 
plot looks way off, so there is definitely a bug somewhere.  
 
* Your analysis is correct as to why the downward sum is better, but again the "data" you're 
analyzing isn't correct. (Note: see the hint on the course webpage for advice on how to sum to 
high values of N ~ 10**6 without generating gobs of data that make the plots ugly.)


3) Problem 3 (bessel functions): 

* Your code looks good, and your plot looks correct.

The analysis is missing a few important points. For instance, at small x and large x, the relative
difference is of order 1. Can you identify which one (if any) is most accurate 
in these regions? Ditto for the region where the relative difference is around machine precision? 

Both for this and the previous problem, you might find the discussion in the Ch. 4 notes
about to be useful where we discuss how the relative difference 
for 2 approximations is a useful tool even if we don't know the "exact" result. 

Note also that the gsl output could be viewed as the "exact" 
answer (it seems reasonable since it's part of a widely used scientific library!),
and you could compute relative errors of the up/down versions wrt the gsl output to tease
out where the up and down versions are accurate. 
 
##### HW grade = check(-) 

You generally have the right idea on your analysis, though a few 
points are missing or could be made a bit clearer.

Problem 2 has some problem(s), which may (or may not) be due to the nonstandard implementation using 
the vector class. 

  


